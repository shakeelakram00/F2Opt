// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module StreamingMaxPool_Batch_0_StreamingMaxPool_Batch_0_Pipeline_VITIS_LOOP_79_3_VITIS_LOOP_80_4_VITIS_LOOP_82_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in0_V_TVALID,
        in0_V_TDATA,
        in0_V_TREADY,
        buf_V_address0,
        buf_V_ce0,
        buf_V_we0,
        buf_V_d0,
        buf_V_address1,
        buf_V_ce1,
        buf_V_q1
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in0_V_TVALID;
input  [23:0] in0_V_TDATA;
output   in0_V_TREADY;
output  [2:0] buf_V_address0;
output   buf_V_ce0;
output   buf_V_we0;
output  [20:0] buf_V_d0;
output  [2:0] buf_V_address1;
output   buf_V_ce1;
input  [20:0] buf_V_q1;

reg ap_idle;
reg in0_V_TREADY;
reg buf_V_ce0;
reg buf_V_we0;
reg buf_V_ce1;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
wire   [0:0] icmp_ln79_fu_134_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_CS_iter2_fsm_state3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in0_V_TDATA_blk_n;
reg   [0:0] icmp_ln79_reg_328;
wire   [0:0] icmp_ln79_reg_328_pp0_iter0_reg;
reg   [0:0] icmp_ln79_reg_328_pp0_iter1_reg;
wire   [0:0] icmp_ln80_fu_152_p2;
reg   [0:0] icmp_ln80_reg_332;
wire   [0:0] and_ln79_fu_170_p2;
reg   [0:0] and_ln79_reg_337;
wire   [20:0] ret_V_fu_194_p2;
reg   [20:0] ret_V_reg_342;
reg   [20:0] ret_V_reg_342_pp0_iter1_reg;
wire   [0:0] icmp_ln82_1_fu_214_p2;
reg   [0:0] icmp_ln82_1_reg_347;
wire   [0:0] icmp_ln82_1_reg_347_pp0_iter0_reg;
reg   [0:0] icmp_ln82_1_reg_347_pp0_iter1_reg;
reg   [2:0] buf_V_addr_reg_351;
wire   [63:0] zext_ln80_fu_277_p1;
reg   [20:0] lhs_V_fu_60;
wire    ap_loop_init;
reg   [20:0] ap_sig_allocacmp_lhs_V_load;
reg   [1:0] kx_fu_64;
wire   [1:0] kx_1_fu_206_p3;
reg   [1:0] ap_sig_allocacmp_kx_load;
reg   [2:0] xp_fu_68;
wire   [2:0] select_ln80_1_fu_270_p3;
reg   [4:0] indvar_flatten_fu_72;
wire   [4:0] select_ln80_2_fu_226_p3;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [4:0] indvar_flatten14_fu_76;
wire   [4:0] add_ln79_fu_140_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten14_load;
wire   [0:0] icmp_ln82_fu_164_p2;
wire   [0:0] xor_ln79_fu_158_p2;
wire   [0:0] or_ln80_fu_176_p2;
wire   [20:0] rhs_V_fu_190_p1;
wire   [20:0] select_ln80_fu_182_p3;
wire   [1:0] add_ln82_fu_200_p2;
wire   [4:0] add_ln80_1_fu_220_p2;
wire   [2:0] select_ln79_fu_257_p3;
wire   [2:0] add_ln80_fu_264_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
reg    ap_condition_281;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

StreamingMaxPool_Batch_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_281)) begin
        if ((icmp_ln79_fu_134_p2 == 1'd0)) begin
            indvar_flatten14_fu_76 <= add_ln79_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten14_fu_76 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_281)) begin
        if ((icmp_ln79_fu_134_p2 == 1'd0)) begin
            indvar_flatten_fu_72 <= select_ln80_2_fu_226_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_281)) begin
        if ((icmp_ln79_fu_134_p2 == 1'd0)) begin
            kx_fu_64 <= kx_1_fu_206_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            kx_fu_64 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_281)) begin
        if ((icmp_ln79_fu_134_p2 == 1'd0)) begin
            lhs_V_fu_60 <= ret_V_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            lhs_V_fu_60 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        xp_fu_68 <= 3'd0;
    end else if (((icmp_ln79_reg_328_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        xp_fu_68 <= select_ln80_1_fu_270_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (icmp_ln79_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        and_ln79_reg_337 <= and_ln79_fu_170_p2;
        icmp_ln80_reg_332 <= icmp_ln80_fu_152_p2;
        icmp_ln82_1_reg_347 <= icmp_ln82_1_fu_214_p2;
        ret_V_reg_342 <= ret_V_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln79_reg_328 <= icmp_ln79_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_reg_328_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln82_1_reg_347_pp0_iter0_reg == 1'd1))) begin
        buf_V_addr_reg_351 <= zext_ln80_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        icmp_ln79_reg_328_pp0_iter1_reg <= icmp_ln79_reg_328;
        icmp_ln82_1_reg_347_pp0_iter1_reg <= icmp_ln82_1_reg_347;
        ret_V_reg_342_pp0_iter1_reg <= ret_V_reg_342;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0)))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

assign ap_ST_iter2_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (icmp_ln79_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state3) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten14_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten14_load = indvar_flatten14_fu_76;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_72;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_kx_load = 2'd0;
    end else begin
        ap_sig_allocacmp_kx_load = kx_fu_64;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_lhs_V_load = 21'd0;
    end else begin
        ap_sig_allocacmp_lhs_V_load = lhs_V_fu_60;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter2_fsm_state3)) begin
        buf_V_ce0 = 1'b1;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
        buf_V_ce1 = 1'b1;
    end else begin
        buf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_328_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3) & (icmp_ln82_1_reg_347_pp0_iter1_reg == 1'd1))) begin
        buf_V_we0 = 1'b1;
    end else begin
        buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (icmp_ln79_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        in0_V_TREADY = 1'b1;
    end else begin
        in0_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((1'b0 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if (((1'b1 == ap_CS_iter1_fsm_state2) | ((icmp_ln79_reg_328_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((1'b1 == ap_CS_iter1_fsm_state2)) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln79_fu_140_p2 = (ap_sig_allocacmp_indvar_flatten14_load + 5'd1);

assign add_ln80_1_fu_220_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln80_fu_264_p2 = (select_ln79_fu_257_p3 + 3'd1);

assign add_ln82_fu_200_p2 = (ap_sig_allocacmp_kx_load + 2'd1);

assign and_ln79_fu_170_p2 = (xor_ln79_fu_158_p2 & icmp_ln82_fu_164_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_281 = (~((ap_start_int == 1'b0) | ((icmp_ln79_fu_134_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buf_V_address0 = buf_V_addr_reg_351;

assign buf_V_address1 = zext_ln80_fu_277_p1;

assign buf_V_d0 = (ret_V_reg_342_pp0_iter1_reg | buf_V_q1);

assign icmp_ln79_fu_134_p2 = ((ap_sig_allocacmp_indvar_flatten14_load == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln79_reg_328_pp0_iter0_reg = icmp_ln79_reg_328;

assign icmp_ln80_fu_152_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd12) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_214_p2 = ((kx_1_fu_206_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln82_1_reg_347_pp0_iter0_reg = icmp_ln82_1_reg_347;

assign icmp_ln82_fu_164_p2 = ((ap_sig_allocacmp_kx_load == 2'd2) ? 1'b1 : 1'b0);

assign kx_1_fu_206_p3 = ((or_ln80_fu_176_p2[0:0] == 1'b1) ? 2'd1 : add_ln82_fu_200_p2);

assign or_ln80_fu_176_p2 = (icmp_ln80_fu_152_p2 | and_ln79_fu_170_p2);

assign ret_V_fu_194_p2 = (select_ln80_fu_182_p3 | rhs_V_fu_190_p1);

assign rhs_V_fu_190_p1 = in0_V_TDATA[20:0];

assign select_ln79_fu_257_p3 = ((icmp_ln80_reg_332[0:0] == 1'b1) ? 3'd0 : xp_fu_68);

assign select_ln80_1_fu_270_p3 = ((and_ln79_reg_337[0:0] == 1'b1) ? add_ln80_fu_264_p2 : select_ln79_fu_257_p3);

assign select_ln80_2_fu_226_p3 = ((icmp_ln80_fu_152_p2[0:0] == 1'b1) ? 5'd1 : add_ln80_1_fu_220_p2);

assign select_ln80_fu_182_p3 = ((or_ln80_fu_176_p2[0:0] == 1'b1) ? 21'd0 : ap_sig_allocacmp_lhs_V_load);

assign xor_ln79_fu_158_p2 = (icmp_ln80_fu_152_p2 ^ 1'd1);

assign zext_ln80_fu_277_p1 = select_ln80_1_fu_270_p3;

endmodule //StreamingMaxPool_Batch_0_StreamingMaxPool_Batch_0_Pipeline_VITIS_LOOP_79_3_VITIS_LOOP_80_4_VITIS_LOOP_82_s
