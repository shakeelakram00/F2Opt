// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
// Version: 2022.2.2
// Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Thresholding_Batch_0_Thresholding_Batch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in0_V_TVALID,
        out_V_TREADY,
        in0_V_TDATA,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in0_V_TVALID;
input   out_V_TREADY;
input  [63:0] in0_V_TDATA;
output   in0_V_TREADY;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;

reg ap_idle;
reg in0_V_TREADY;
reg out_V_TVALID;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
wire   [0:0] icmp_ln295_fu_240_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg   [0:0] icmp_ln295_reg_494;
reg   [0:0] icmp_ln295_reg_494_pp0_iter1_reg;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] p_ZL7threshs_0_address0;
reg    p_ZL7threshs_0_ce0;
wire   [7:0] p_ZL7threshs_0_q0;
wire   [6:0] p_ZL7threshs_1_address0;
reg    p_ZL7threshs_1_ce0;
wire   [7:0] p_ZL7threshs_1_q0;
wire   [6:0] p_ZL7threshs_2_address0;
reg    p_ZL7threshs_2_ce0;
wire   [7:0] p_ZL7threshs_2_q0;
wire   [6:0] p_ZL7threshs_3_address0;
reg    p_ZL7threshs_3_ce0;
wire   [7:0] p_ZL7threshs_3_q0;
wire   [6:0] p_ZL7threshs_4_address0;
reg    p_ZL7threshs_4_ce0;
wire   [7:0] p_ZL7threshs_4_q0;
wire   [6:0] p_ZL7threshs_5_address0;
reg    p_ZL7threshs_5_ce0;
wire   [7:0] p_ZL7threshs_5_q0;
wire   [6:0] p_ZL7threshs_6_address0;
reg    p_ZL7threshs_6_ce0;
wire   [7:0] p_ZL7threshs_6_q0;
wire   [6:0] p_ZL7threshs_7_address0;
reg    p_ZL7threshs_7_ce0;
wire   [7:0] p_ZL7threshs_7_q0;
reg    in0_V_TDATA_blk_n;
reg    out_V_TDATA_blk_n;
wire   [0:0] icmp_ln295_reg_494_pp0_iter0_reg;
wire   [7:0] r_V_fu_252_p1;
reg   [7:0] r_V_reg_498;
reg   [7:0] r_V_reg_498_pp0_iter1_reg;
reg   [7:0] r_V_1_reg_503;
reg   [7:0] r_V_1_reg_503_pp0_iter1_reg;
reg   [7:0] r_V_2_reg_508;
reg   [7:0] r_V_2_reg_508_pp0_iter1_reg;
reg   [7:0] r_V_3_reg_513;
reg   [7:0] r_V_3_reg_513_pp0_iter1_reg;
reg   [7:0] r_V_4_reg_518;
reg   [7:0] r_V_4_reg_518_pp0_iter1_reg;
reg   [7:0] r_V_5_reg_523;
reg   [7:0] r_V_5_reg_523_pp0_iter1_reg;
reg   [7:0] r_V_6_reg_528;
reg   [7:0] r_V_6_reg_528_pp0_iter1_reg;
reg   [7:0] r_V_7_reg_533;
reg   [7:0] r_V_7_reg_533_pp0_iter1_reg;
wire   [63:0] idxprom2_i_fu_334_p1;
reg   [31:0] nf_1_fu_102;
wire   [31:0] nf_2_fu_358_p3;
wire    ap_loop_init;
reg   [6:0] i_fu_106;
wire   [6:0] i_2_fu_246_p2;
reg   [6:0] ap_sig_allocacmp_i_1;
wire   [31:0] nf_fu_346_p2;
wire   [0:0] icmp_ln307_fu_352_p2;
wire   [0:0] icmp_ln1039_fu_371_p2;
wire   [0:0] icmp_ln1039_1_fu_382_p2;
wire   [0:0] icmp_ln1039_2_fu_393_p2;
wire   [0:0] icmp_ln1039_3_fu_404_p2;
wire   [0:0] icmp_ln1039_4_fu_415_p2;
wire   [0:0] icmp_ln1039_5_fu_426_p2;
wire   [0:0] icmp_ln1039_6_fu_437_p2;
wire   [0:0] icmp_ln1039_7_fu_448_p2;
wire   [0:0] result_V_7_fu_453_p2;
wire   [0:0] result_V_6_fu_442_p2;
wire   [0:0] result_V_5_fu_431_p2;
wire   [0:0] result_V_4_fu_420_p2;
wire   [0:0] result_V_3_fu_409_p2;
wire   [0:0] result_V_2_fu_398_p2;
wire   [0:0] result_V_1_fu_387_p2;
wire   [0:0] result_V_fu_376_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
reg    ap_condition_445;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_0_address0),
    .ce0(p_ZL7threshs_0_ce0),
    .q0(p_ZL7threshs_0_q0)
);

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_1_address0),
    .ce0(p_ZL7threshs_1_ce0),
    .q0(p_ZL7threshs_1_q0)
);

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_2_address0),
    .ce0(p_ZL7threshs_2_ce0),
    .q0(p_ZL7threshs_2_q0)
);

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_3_address0),
    .ce0(p_ZL7threshs_3_ce0),
    .q0(p_ZL7threshs_3_q0)
);

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_4_address0),
    .ce0(p_ZL7threshs_4_ce0),
    .q0(p_ZL7threshs_4_q0)
);

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_5_address0),
    .ce0(p_ZL7threshs_5_ce0),
    .q0(p_ZL7threshs_5_q0)
);

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_6_address0),
    .ce0(p_ZL7threshs_6_ce0),
    .q0(p_ZL7threshs_6_q0)
);

Thresholding_Batch_0_Thresholding_Batch_p_ZL7threshs_0_ROM_2P_LUTRAM_1R #(
    .DataWidth( 8 ),
    .AddressRange( 98 ),
    .AddressWidth( 7 ))
p_ZL7threshs_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZL7threshs_7_address0),
    .ce0(p_ZL7threshs_7_ce0),
    .q0(p_ZL7threshs_7_q0)
);

Thresholding_Batch_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0))) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0))) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_445)) begin
        if ((icmp_ln295_fu_240_p2 == 1'd0)) begin
            i_fu_106 <= i_2_fu_246_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_106 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        nf_1_fu_102 <= 32'd0;
    end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2) & (icmp_ln295_reg_494_pp0_iter0_reg == 1'd0))) begin
        nf_1_fu_102 <= nf_2_fu_358_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln295_reg_494 <= icmp_ln295_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln295_reg_494_pp0_iter1_reg <= icmp_ln295_reg_494;
        r_V_1_reg_503_pp0_iter1_reg <= r_V_1_reg_503;
        r_V_2_reg_508_pp0_iter1_reg <= r_V_2_reg_508;
        r_V_3_reg_513_pp0_iter1_reg <= r_V_3_reg_513;
        r_V_4_reg_518_pp0_iter1_reg <= r_V_4_reg_518;
        r_V_5_reg_523_pp0_iter1_reg <= r_V_5_reg_523;
        r_V_6_reg_528_pp0_iter1_reg <= r_V_6_reg_528;
        r_V_7_reg_533_pp0_iter1_reg <= r_V_7_reg_533;
        r_V_reg_498_pp0_iter1_reg <= r_V_reg_498;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (icmp_ln295_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        r_V_1_reg_503 <= {{in0_V_TDATA[15:8]}};
        r_V_2_reg_508 <= {{in0_V_TDATA[23:16]}};
        r_V_3_reg_513 <= {{in0_V_TDATA[31:24]}};
        r_V_4_reg_518 <= {{in0_V_TDATA[39:32]}};
        r_V_5_reg_523 <= {{in0_V_TDATA[47:40]}};
        r_V_6_reg_528 <= {{in0_V_TDATA[55:48]}};
        r_V_7_reg_533 <= {{in0_V_TDATA[63:56]}};
        r_V_reg_498 <= r_V_fu_252_p1;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0)))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (icmp_ln295_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0))) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_106;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln295_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (icmp_ln295_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        in0_V_TREADY = 1'b1;
    end else begin
        in0_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        out_V_TDATA_blk_n = out_V_TREADY;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0))) & (icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        out_V_TVALID = 1'b1;
    end else begin
        out_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_0_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_1_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_2_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_3_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_4_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_5_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_6_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        p_ZL7threshs_7_ce0 = 1'b1;
    end else begin
        p_ZL7threshs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & ~((ap_start_int == 1'b0) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_start_int == 1'b0) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if (((~((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2)) | (~((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0))) & (icmp_ln295_reg_494_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3)))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_445 = (~((ap_start_int == 1'b0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | ((icmp_ln295_reg_494_pp0_iter1_reg == 1'd0) & (out_V_TREADY == 1'b0)))) | ((icmp_ln295_fu_240_p2 == 1'd0) & (in0_V_TVALID == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_fu_246_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign icmp_ln1039_1_fu_382_p2 = ((r_V_1_reg_503_pp0_iter1_reg < p_ZL7threshs_1_q0) ? 1'b1 : 1'b0);

assign icmp_ln1039_2_fu_393_p2 = ((r_V_2_reg_508_pp0_iter1_reg < p_ZL7threshs_2_q0) ? 1'b1 : 1'b0);

assign icmp_ln1039_3_fu_404_p2 = ((r_V_3_reg_513_pp0_iter1_reg < p_ZL7threshs_3_q0) ? 1'b1 : 1'b0);

assign icmp_ln1039_4_fu_415_p2 = ((r_V_4_reg_518_pp0_iter1_reg < p_ZL7threshs_4_q0) ? 1'b1 : 1'b0);

assign icmp_ln1039_5_fu_426_p2 = ((r_V_5_reg_523_pp0_iter1_reg < p_ZL7threshs_5_q0) ? 1'b1 : 1'b0);

assign icmp_ln1039_6_fu_437_p2 = ((r_V_6_reg_528_pp0_iter1_reg < p_ZL7threshs_6_q0) ? 1'b1 : 1'b0);

assign icmp_ln1039_7_fu_448_p2 = ((r_V_7_reg_533_pp0_iter1_reg < p_ZL7threshs_7_q0) ? 1'b1 : 1'b0);

assign icmp_ln1039_fu_371_p2 = ((r_V_reg_498_pp0_iter1_reg < p_ZL7threshs_0_q0) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_240_p2 = ((ap_sig_allocacmp_i_1 == 7'd98) ? 1'b1 : 1'b0);

assign icmp_ln295_reg_494_pp0_iter0_reg = icmp_ln295_reg_494;

assign icmp_ln307_fu_352_p2 = ((nf_fu_346_p2 == 32'd98) ? 1'b1 : 1'b0);

assign idxprom2_i_fu_334_p1 = nf_1_fu_102;

assign nf_2_fu_358_p3 = ((icmp_ln307_fu_352_p2[0:0] == 1'b1) ? 32'd0 : nf_fu_346_p2);

assign nf_fu_346_p2 = (nf_1_fu_102 + 32'd1);

assign out_V_TDATA = {{{{{{{{result_V_7_fu_453_p2}, {result_V_6_fu_442_p2}}, {result_V_5_fu_431_p2}}, {result_V_4_fu_420_p2}}, {result_V_3_fu_409_p2}}, {result_V_2_fu_398_p2}}, {result_V_1_fu_387_p2}}, {result_V_fu_376_p2}};

assign p_ZL7threshs_0_address0 = idxprom2_i_fu_334_p1;

assign p_ZL7threshs_1_address0 = idxprom2_i_fu_334_p1;

assign p_ZL7threshs_2_address0 = idxprom2_i_fu_334_p1;

assign p_ZL7threshs_3_address0 = idxprom2_i_fu_334_p1;

assign p_ZL7threshs_4_address0 = idxprom2_i_fu_334_p1;

assign p_ZL7threshs_5_address0 = idxprom2_i_fu_334_p1;

assign p_ZL7threshs_6_address0 = idxprom2_i_fu_334_p1;

assign p_ZL7threshs_7_address0 = idxprom2_i_fu_334_p1;

assign r_V_fu_252_p1 = in0_V_TDATA[7:0];

assign result_V_1_fu_387_p2 = (icmp_ln1039_1_fu_382_p2 ^ 1'd1);

assign result_V_2_fu_398_p2 = (icmp_ln1039_2_fu_393_p2 ^ 1'd1);

assign result_V_3_fu_409_p2 = (icmp_ln1039_3_fu_404_p2 ^ 1'd1);

assign result_V_4_fu_420_p2 = (icmp_ln1039_4_fu_415_p2 ^ 1'd1);

assign result_V_5_fu_431_p2 = (icmp_ln1039_5_fu_426_p2 ^ 1'd1);

assign result_V_6_fu_442_p2 = (icmp_ln1039_6_fu_437_p2 ^ 1'd1);

assign result_V_7_fu_453_p2 = (icmp_ln1039_7_fu_448_p2 ^ 1'd1);

assign result_V_fu_376_p2 = (icmp_ln1039_fu_371_p2 ^ 1'd1);

endmodule //Thresholding_Batch_0_Thresholding_Batch
